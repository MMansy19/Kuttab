generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  bio                   String?
  gender                String?
  role                  String                @default("USER")
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  accounts              Account[]
  bookingsAsUser        Booking[]             @relation("UserBookings")
  notificationsSent     Notification[]        @relation("NotificationSender")
  notificationsReceived Notification[]        @relation("NotificationReceiver")
  receivedReviews       Review[]              @relation("TeacherReviews")
  givenReviews          Review[]              @relation("UserReviews")
  sessions              Session[]
  availability          TeacherAvailability[]
  teacherProfile        TeacherProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeacherProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  specialization    String?
  videoUrl          String?
  yearsOfExperience Int?
  approvalStatus    String    @default("PENDING")
  isAvailable       Boolean   @default(true)
  averageRating     Float     @default(0)
  reviewCount       Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bookings          Booking[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherAvailability {
  id          String   @id @default(cuid())
  teacherId   String
  dayOfWeek   Int
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teacher     User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, dayOfWeek, startTime, endTime])
}

model Booking {
  id               String         @id @default(cuid())
  userId           String
  teacherProfileId String
  startTime        DateTime
  endTime          DateTime
  status           String         @default("PENDING")
  notes            String?
  meetingLink      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  canceledBy       String?
  cancelReason     String?
  teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id])
  user             User           @relation("UserBookings", fields: [userId], references: [id])
  reviews          Review[]
}

model Review {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  teacherId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacher   User     @relation("TeacherReviews", fields: [teacherId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, userId])
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiverId String
  senderId   String?
  entityId   String?
  entityType String?
  sender     User?    @relation("NotificationSender", fields: [senderId], references: [id])
  receiver   User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}
