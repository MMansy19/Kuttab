generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // Enable driver adapters for connection pooling
  output          = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Enable DirectConnection for Neon
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  email                 String          @unique
  emailVerified         DateTime?
  password              String?
  role                  String          @default("USER")
  image                 String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  sessions              Session[]
  accounts              Account[]
  // Added relations for the missing models
  teacherProfile        TeacherProfile?
  receivedNotifications Notification[]  @relation("ReceivedNotifications")
  sentNotifications     Notification[]  @relation("SentNotifications")
  bookings              Booking[]       @relation("UserBookings")
  teacherBookings       Booking[]       @relation("TeacherBookings")
  reviews               Review[]        @relation("UserReviews")
  reviewsReceived       Review[]        @relation("ReceivedReviews")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Added missing models

model Notification {
  id         String   @id @default(cuid())
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiverId String?
  receiver   User?    @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: SetNull)
  senderId   String?
  sender     User?    @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  type       String   @default("SYSTEM")
  linkUrl    String?
  bookingId  String?
  booking    Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

model TeacherProfile {
  id              String                @id @default(cuid())
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  specializations String[]
  languages       String[]
  hourlyRate      Float?
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  reviews         Review[]
  availability    TeacherAvailability[]
  bookings        Booking[]
}

model TeacherAvailability {
  id           String         @id @default(cuid())
  teacherId    String
  teacher      TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  dayOfWeek    Int // 0 (Sunday) to 6 (Saturday)
  startTime    String // Format: "HH:MM"
  endTime      String // Format: "HH:MM"
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isRecurring  Boolean        @default(true)
  specificDate DateTime? // For non-recurring slots
  isAvailable  Boolean        @default(true)
}

model Booking {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  teacherId        String
  teacher          User           @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherProfileId String
  teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)
  startTime        DateTime
  endTime          DateTime
  status           String         @default("PENDING") // PENDING, CONFIRMED, CANCELED, COMPLETED
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  notifications    Notification[]
  review           Review?
}

model Review {
  id               String         @id @default(cuid())
  bookingId        String         @unique
  booking          Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId           String
  user             User           @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  teacherId        String
  teacher          User           @relation("ReceivedReviews", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherProfileId String
  teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)
  rating           Int
  comment          String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
